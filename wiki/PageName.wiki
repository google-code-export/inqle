#summary describes the 3 types of data stores that INQLE employs

An INQLE server uses 3 types of data stores.  Below we compare and contrast these.

|| *Feature* || *External Dataset* || *Cache Dataset* || *Internal Dataset* ||
|| What it stores || RDF data that the user has loaded || RDF objects derived by INQLE, describing the loaded data || RDF objects used by INQLE to function, such as databases, datasets, samplers ||
|| Architecture || INQLE server points to 1 or more databases, each of which may be shared by multiple INQLE servers || INQLE server points to a single database, which may be shared by multiple INQLE servers || INQLE server points to a single database, which is not shared ||
|| How to create one || User creates in INQLE Administration web interface || Plug-in contributor creates || Plug-in contributor creates ||
||
|| Extension Point || org.inqle.data.datasetFunctions - can be used to create a new 'purpose' for user-loaded data.  Example: we have created the dataset function org.inqle.datasetFunctions.schemas.  Datasets that are designated to fulfill this function can be used by the program to look up RDF ontology/schema information || org.inqle.data.cacheDatasets - can be used to declare a new cache dataset.  Example: org.inqle.data.cacheDatasets.subjectClasses contains objects, each of which contain a list of RDF subject classes for a particular !ExternalDataset || org.inqle.data.datasets - can be used to declare a new !InternalDataset, which will contain objects for INQLE to work.  Examples of such objects include datasets, databases, customizations of samplers, learning agents. ||