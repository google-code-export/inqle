#summary INQLE uses a flexible schema for representing any type of data.

This page describes INQLE's generic schema, which can be used to represent any experimental data or other data with a time component.

INQLE stores and works with semantic, RDF data.  It seeks to handle most any structure (schema) of RDF data.  When INQLE creates semantic data (by importing from a non-semantic spreadsheet, by survey data it collects, or by other means), INQLE uses a flexible schema for representing any type of data.  This schema enables INQLE to ensure that the data it creates is identified by existing semantic classes, while containing maximal information about each datum.  This schema could be used to represent any data semantically, whether for use in data mining or any other purpose.

Here are the particulars of this schema.

(1) Each datum has a single *subject*.  

(2) Each data subject is identified by a URI.  Where possible, URIs of known entities are used. 

(3) Each data subject is an instance of a particular semantic class (RDFS or OWL).  Where possible, an existing semantic class is used.

(4) Each data subject has _identifying_ attributes.  Such attributes are those that generally do NOT change.   Most notably, it has a URI, which identifies it globally.  _Identifying_ attributes are represented by already-existing semantic properties of the subject's semantic class, when available.  If the subject's semantic class lacks the needed property, then a new _identifying_ attribute can be declared to be a property of the subject's semantic class.  In either case, the _identifying_ attribute values are properties of the data subject.

(5) Each data subject has _measurement_ attributes.  Such attributes are values which DO change.  These are the types of attributes which contain minable information.  _Measurement_ attributes are NOT properties of the subject itself.  Rather, they are properties of a new semantic class, called:
http://ns.inqle.org/Data
which is abbreviated to
inqle:Data

An instance of inqle:Data is analogous to a row of data in a table of data like a spreadsheet.  Each attribute value it has is analogous to a cell in that row.  Each attribute it has is analogous to a column in that table.  

(6) The property inqle:Data can contain any type of property suited to the subject it is about.  If a particular inqle:Data instance is about a person, the that inqle:data instance might have attributes
  * hasHeight
  * hasAge
  * isInPhaseOfSleep

(7) Some properties are common among all or most instances of inqle:Data.  These properties include
  * *inqle:hasSubject* - identifies the data subject.
  * *inqle:date* - identifies the date and time of the measurement, when appropriate
  * [location properties].  These identify the city, country, latitude, longitude of the measurement, when appropriate.

Other such common properties will be defined, to specify the source of the data (institution, research lab, INQLE server).

(8) Data subjects, in turn, have the inverse property
*inqle:hasData*, which identifies the inqle:Data measurement about it.

(9) The semantic class inqle:Data has a super class, 
inqle:DataTable.  When importing a table of data, INQLE creates a new subclass of inqle:DataTable, and adds any global properties about the data table.  For instance, if the entire table of data pertains to a particular moment in time, then the sublcass representing the data table will have the property inqle:data with a particular static value.

Each .  The above properties (in #7) are also applicable to the inqle:DataTable.


Some instances of inqle:Data will be subclasses of a inqle:DataTable instance.

If that subject represents a group of multiple individuals (like a married couple), then the subject is the group itself (like the URI of the couple object, which in turn has