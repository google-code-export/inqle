= Introduction =

Bundle *org.inqle.data.rdf.jenabean* is a packet of code, comprising part of INQLE's code base (see [INQLE_Architecture INQLE Architecture]).
This bundle enables INQLE to work with semantic, RDF, data.

This bundle contains 2 toolkits for working with RDF data
  * [http://jena.sourceforge.net/ Jena Semantic Web Framework], maintained by [http://www.hpl.hp.com/ HP Labs] since 2000.  This framework facilitates many, many operations using RDF.  Most notably, it allows INQLE to do SPARQL Queries on RDF Databases and to bulk load RDF data from a file
  * [http://code.google.com/p/jenabean/ Jenabean] for persisting Java objects to an RDF store and reconstituting them back from the RDF object store.  We term this ability to store Java objects as RDF *Object-RDF Persistence*.

= Details =

===1. Object - RDF Persistance (ORDFP)===
Object-RDF Persistance means that Java objects can be stored in an RDF database and later recreated from the database. Any object which adheres to the [http://en.wikipedia.org/wiki/JavaBeans|Javabean standard] (class must implement Serializable, have no-argument constructor, use get and set methods), can be easily persisted (stored) to the INQLE database or retrieved therefrom.

Note that Jenabean (and this INQLE bundle) supports persisting javabeans which contain fields of any of these types:
  * String
  * java.util.Date
  * java.net.URI
  * Java primitives (int, boolean, etc.)
  * Serializable objects
  * other nested Jenabeans
  * Collection of the above
  * array of the above

Examples of Persistable objects which contributors might wish to create include:
BlogPost - to contain blog posts, discussion thread, etc. for a Content Management System plugin
LaboratoryReport - to contain a set of laboratory data, from a medical study

This bundle specifies a number of Jenabean classes, that it uses to store and retrieve datasets as Jena Models.  

See the [http://code.google.com/p/jenabean/w/list Jenabean documentation] on how to create and work with Jenabean.

Example of how to create, store, and load an persistable object in INQLE:

*(1) Create your Jenabean class.
{{{
@TargetDataset("org.myorg.myapp.blogPosts")
@Namespace(RDF.INQLE)
public class BlogPost {

    private String id;
    private String blogTitle;
    private String blogBody;

    @Id
    public String getId() {
        return id;
    }

    public void setId(String id) {
                this.id = id;
    }

    public String getBlogTitle() {
        return this.blogTitle;
    }

    public void setBolgTitle(String blogTitle) {
        this.blogTitle = blogTitle;
    }

    // ... other getter and setter method for blogBody

}

}}}

*(2) To your plugin's plugin.xml file, declare the datamodel to which you want these objects to be saved.*  You can opt to save them to other datamodels, but by default they will be saved to this datamodel.
{{{
<datamodel
           id="org.myorg.myapp.blogPosts"
           weight="1000"
           description="contains blog posts.">
			</datamodel>
}}}
*(3) In your Java code, create instance of this class.* Each persistable javabean must have a unique ID, which must be a valid URI:
{{{
BlogPost blogPost = new BlogPost();
String blogPostId = UUID.randomUUID().toString();
blogPost.setId(blogPostId);

}}}

*(4) Add data to this object:*
{{{
blogPost.setTitle("This is title of first blog post");
blogPost.setBody("Here is the body of the first blog post.");
}}}

*(5) Persist this object:*
{{{
//get Persister singleton object
Persister persister = Persister.getInstance();

//save the blog post to its target datamodel.  INQLE knows the name and location of this datamodel
persister.persist(blogPost);

}}}
*(6) Later retrieve this object.*
{{{
//get Persister singleton object
Persister persister = Persister.getInstance();

BlogPost blogPost = (BlogPost)persister.reconstitute(BlogPost.class, blogPostId);
}}}

===2. SPARQL Querying===
The [http://www.w3.org/TR/rdf-sparql-query/ SPARQL] query language is an emerging standard of the semantic web. It is a powerful way of selecting related data from disparate data sources. This bundle supports query across 1 or more datamodels, represented in a relational database and/or by a RDF data file. 

*Usage:*
Simply create a QueryCriteria object, add as many D\datamodel objects as desired, add the SPARQL query, and call querySelect method
{{{
QueryCriteria queryCriteria = new QueryCriteria();
queryCriteria.addNamedModel(namedModel1);
queryCriteria.addNamedModel(namedModel2);
queryCriteria.setQuery(mySparql);
//you can retrieve the result as a variety of classes
ResultSetRewindable resultSet = Queryer.selectResultSet(queryCriteria);
}}}

Queries are faster when they are issued against a single datamodel.  However, the Jena TDB engine within INQLE does support querying across many datamodels at once.

===3. Bulk Loading of RDF Data from a File===
This bundle supports loading RDF data from a file with any of these RDF syntaxes:
  * RDF/XML
  * N-TRIPLE
  * N3
  * Turtle

To load data, your code can do the following:
{{{
Model loadIntoThisModel = ModelFactory.createDefaultModel();
Loader loader = new Loader(loadIntoThisModel);

//fullFilepath = the path to the file to load
loader.loadFile(fullFilepath, DEFAULT_URI);
}}}