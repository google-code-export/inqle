#summary Describes how to develop for INQLE

==Developing INQLE Plugins==
The easiest way to develop code for INQLE is to provide 1 or more plugins for INQLE.  The different types of plugins that you can create for INQLE are described under Plugins_for_INQLE.  We suggest you start with this type of contribution, before trying to develop code for INQLE core.

To develop INQLE plugins, you need only package your code as an Eclipse Equinox jar file.  A jar file is much like a zip file, with a few rules.  Your jar file must have a folder called META-INF, and this folder must have a file called MANIFEST.MF.  Additionally, you must provide a plugin.xml file in the root of your jar file.  plugin.xml specifies the plugins you are providing.  Each plugin is represented by a single jar file.  Each jar file has a single MANIFEST.MF file and a single plugins.xml.  Reach MANIFEST.MF file specifies multiple settings for your plugin.  Each plugin.xml file may contribute 1 or more plugins for 1 or more plugin types.  Additionally, plugin.xml may define new plugin types as well.

==Developing on the INQLE Core==
Writing code for core INQLE requires expertise in ~2 or more of these areas:
  * Java
  * Equinox OSGi
  * Eclipse RCP or RAP
  * Jena RDF


===Getting INQLE Source Code===
We develop INQLE core using the Eclipse Integrated Development Envirement (IDE).
To work on the INQLE core code, you must check out all INQLE bundles from the INQLE Subversion repository.  Each bundle should appear in your Eclipse IDE as a "Plug-In Project".  

[http://code.google.com/p/inqle/source/checkout The process of checking out code from Subversion is described here].  You must also set up your Eclipse IDE to use the RAP 1.1 target platform or above.  

===Building and Deploying INQLE===
We deploy INQLE, by right clicking the InqleFeature project.  Next, select "Export...", then under "Plug-in Development", select "Deployable features".  Selectg the directory of your choice to export to.