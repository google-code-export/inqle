// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inqle.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.inqle.domain.Account;
import org.inqle.domain.ChoiceDataOnDemand;
import org.inqle.domain.Datum;
import org.inqle.domain.DatumDataOnDemand;
import org.inqle.domain.FormulaDataOnDemand;
import org.inqle.domain.Participant;
import org.inqle.domain.ParticipantDataOnDemand;
import org.inqle.domain.QuestionDataOnDemand;
import org.inqle.domain.UnitDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DatumDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DatumDataOnDemand: @Component;
    
    private Random DatumDataOnDemand.rnd = new SecureRandom();
    
    private List<Datum> DatumDataOnDemand.data;
    
    @Autowired
    UnitDataOnDemand DatumDataOnDemand.unitDataOnDemand;
    
    @Autowired
    ChoiceDataOnDemand DatumDataOnDemand.choiceDataOnDemand;
    
    @Autowired
    FormulaDataOnDemand DatumDataOnDemand.formulaDataOnDemand;
    
    @Autowired
    ParticipantDataOnDemand DatumDataOnDemand.participantDataOnDemand;
    
    @Autowired
    QuestionDataOnDemand DatumDataOnDemand.questionDataOnDemand;
    
    public Datum DatumDataOnDemand.getNewTransientDatum(int index) {
        Datum obj = new Datum();
        setCanonicalValue(obj, index);
        setCreated(obj, index);
        setCreatedBy(obj, index);
        setNormalizedValue(obj, index);
        setNumericValue(obj, index);
        setParticipant(obj, index);
        setTextValue(obj, index);
        setUpdated(obj, index);
        setUpdatedBy(obj, index);
        return obj;
    }
    
    public void DatumDataOnDemand.setCanonicalValue(Datum obj, int index) {
        Double canonicalValue = new Integer(index).doubleValue();
        obj.setCanonicalValue(canonicalValue);
    }
    
    public void DatumDataOnDemand.setCreated(Datum obj, int index) {
        Date created = new Date(new Date().getTime() + 10000000L);
        obj.setCreated(created);
    }
    
    public void DatumDataOnDemand.setCreatedBy(Datum obj, int index) {
        Account createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void DatumDataOnDemand.setNormalizedValue(Datum obj, int index) {
        Double normalizedValue = new Integer(index).doubleValue();
        obj.setNormalizedValue(normalizedValue);
    }
    
    public void DatumDataOnDemand.setNumericValue(Datum obj, int index) {
        Double numericValue = new Integer(index).doubleValue();
        obj.setNumericValue(numericValue);
    }
    
    public void DatumDataOnDemand.setParticipant(Datum obj, int index) {
        Participant participant = participantDataOnDemand.getRandomParticipant();
        obj.setParticipant(participant);
    }
    
    public void DatumDataOnDemand.setTextValue(Datum obj, int index) {
        String textValue = "textValue_" + index;
        obj.setTextValue(textValue);
    }
    
    public void DatumDataOnDemand.setUpdated(Datum obj, int index) {
        Date updated = new Date(new Date().getTime() + 10000000L);
        obj.setUpdated(updated);
    }
    
    public void DatumDataOnDemand.setUpdatedBy(Datum obj, int index) {
        Account updatedBy = null;
        obj.setUpdatedBy(updatedBy);
    }
    
    public Datum DatumDataOnDemand.getSpecificDatum(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Datum obj = data.get(index);
        Long id = obj.getId();
        return Datum.findDatum(id);
    }
    
    public Datum DatumDataOnDemand.getRandomDatum() {
        init();
        Datum obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Datum.findDatum(id);
    }
    
    public boolean DatumDataOnDemand.modifyDatum(Datum obj) {
        return false;
    }
    
    public void DatumDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Datum.findDatumEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Datum' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Datum>();
        for (int i = 0; i < 10; i++) {
            Datum obj = getNewTransientDatum(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
