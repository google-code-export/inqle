// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inqle.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.inqle.domain.Question;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;

privileged aspect Question_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer Question.solrServer;
    
    public static QueryResponse Question.search(String queryString) {
        String searchString = "Question_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse Question.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void Question.indexQuestion(Question question) {
        List<Question> questions = new ArrayList<Question>();
        questions.add(question);
        indexQuestions(questions);
    }
    
    @Async
    public static void Question.indexQuestions(Collection<Question> questions) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (Question question : questions) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "question_" + question.getId());
            sid.addField("question.created_dt", question.getCreated());
            sid.addField("question.updated_dt", question.getUpdated());
            sid.addField("question.chronicity_i", question.getChronicity());
            sid.addField("question.lang_s", question.getLang());
            sid.addField("question.concept_t", question.getConcept());
            sid.addField("question.createdby_t", question.getCreatedBy());
            sid.addField("question.updatedby_t", question.getUpdatedBy());
            sid.addField("question.priority_i", question.getPriority());
            sid.addField("question.text_s", question.getText());
            sid.addField("question.tag_s", question.getTag());
            sid.addField("question.abbreviation_s", question.getAbbreviation());
            sid.addField("question.id_l", question.getId());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("question_solrsummary_t", new StringBuilder().append(question.getCreated()).append(" ").append(question.getUpdated()).append(" ").append(question.getChronicity()).append(" ").append(question.getLang()).append(" ").append(question.getConcept()).append(" ").append(question.getCreatedBy()).append(" ").append(question.getUpdatedBy()).append(" ").append(question.getPriority()).append(" ").append(question.getText()).append(" ").append(question.getTag()).append(" ").append(question.getAbbreviation()).append(" ").append(question.getId()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void Question.deleteIndex(Question question) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("question_" + question.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void Question.postPersistOrUpdate() {
        indexQuestion(this);
    }
    
    @PreRemove
    private void Question.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer Question.solrServer() {
        SolrServer _solrServer = new Question().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
