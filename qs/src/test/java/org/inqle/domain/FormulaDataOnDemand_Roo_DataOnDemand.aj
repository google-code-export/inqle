// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inqle.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.inqle.domain.Concept;
import org.inqle.domain.ConceptDataOnDemand;
import org.inqle.domain.Formula;
import org.inqle.domain.FormulaDataOnDemand;
import org.inqle.domain.security.Principal;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FormulaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FormulaDataOnDemand: @Component;
    
    private Random FormulaDataOnDemand.rnd = new SecureRandom();
    
    private List<Formula> FormulaDataOnDemand.data;
    
    @Autowired
    ConceptDataOnDemand FormulaDataOnDemand.conceptDataOnDemand;
    
    public Formula FormulaDataOnDemand.getNewTransientFormula(int index) {
        Formula obj = new Formula();
        setConcept(obj, index);
        setCreated(obj, index);
        setCreatedBy(obj, index);
        setExpression(obj, index);
        setUpdated(obj, index);
        setUpdatedBy(obj, index);
        return obj;
    }
    
    public void FormulaDataOnDemand.setConcept(Formula obj, int index) {
        Concept concept = conceptDataOnDemand.getRandomConcept();
        obj.setConcept(concept);
    }
    
    public void FormulaDataOnDemand.setCreated(Formula obj, int index) {
        Date created = new Date(new Date().getTime() + 10000000L);
        obj.setCreated(created);
    }
    
    public void FormulaDataOnDemand.setCreatedBy(Formula obj, int index) {
        Principal createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void FormulaDataOnDemand.setExpression(Formula obj, int index) {
        String expression = "expression_" + index;
        obj.setExpression(expression);
    }
    
    public void FormulaDataOnDemand.setUpdated(Formula obj, int index) {
        Date updated = new Date(new Date().getTime() + 10000000L);
        obj.setUpdated(updated);
    }
    
    public void FormulaDataOnDemand.setUpdatedBy(Formula obj, int index) {
        Principal updatedBy = null;
        obj.setUpdatedBy(updatedBy);
    }
    
    public Formula FormulaDataOnDemand.getSpecificFormula(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Formula obj = data.get(index);
        Long id = obj.getId();
        return Formula.findFormula(id);
    }
    
    public Formula FormulaDataOnDemand.getRandomFormula() {
        init();
        Formula obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Formula.findFormula(id);
    }
    
    public boolean FormulaDataOnDemand.modifyFormula(Formula obj) {
        return false;
    }
    
    public void FormulaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Formula.findFormulaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Formula' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Formula>();
        for (int i = 0; i < 10; i++) {
            Formula obj = getNewTransientFormula(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
