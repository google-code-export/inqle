// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inqle.domain;

import java.util.List;
import org.inqle.domain.Participant;
import org.inqle.domain.ParticipantDataOnDemand;
import org.inqle.domain.ParticipantIntegrationTest;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ParticipantIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ParticipantIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ParticipantIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ParticipantIntegrationTest: @Transactional;
    
    @Autowired
    ParticipantDataOnDemand ParticipantIntegrationTest.dod;
    
    @Test
    public void ParticipantIntegrationTest.testCountParticipants() {
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", dod.getRandomParticipant());
        long count = Participant.countParticipants();
        Assert.assertTrue("Counter for 'Participant' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ParticipantIntegrationTest.testFindParticipant() {
        Participant obj = dod.getRandomParticipant();
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Participant' failed to provide an identifier", id);
        obj = Participant.findParticipant(id);
        Assert.assertNotNull("Find method for 'Participant' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Participant' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ParticipantIntegrationTest.testFindAllParticipants() {
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", dod.getRandomParticipant());
        long count = Participant.countParticipants();
        Assert.assertTrue("Too expensive to perform a find all test for 'Participant', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Participant> result = Participant.findAllParticipants();
        Assert.assertNotNull("Find all method for 'Participant' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Participant' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ParticipantIntegrationTest.testFindParticipantEntries() {
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", dod.getRandomParticipant());
        long count = Participant.countParticipants();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Participant> result = Participant.findParticipantEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Participant' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Participant' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ParticipantIntegrationTest.testFlush() {
        Participant obj = dod.getRandomParticipant();
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Participant' failed to provide an identifier", id);
        obj = Participant.findParticipant(id);
        Assert.assertNotNull("Find method for 'Participant' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyParticipant(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'Participant' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ParticipantIntegrationTest.testMergeUpdate() {
        Participant obj = dod.getRandomParticipant();
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Participant' failed to provide an identifier", id);
        obj = Participant.findParticipant(id);
        boolean modified =  dod.modifyParticipant(obj);
        Integer currentVersion = obj.getVersion();
        Participant merged = obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'Participant' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ParticipantIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", dod.getRandomParticipant());
        Participant obj = dod.getNewTransientParticipant(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Participant' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Participant' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Participant' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ParticipantIntegrationTest.testRemove() {
        Participant obj = dod.getRandomParticipant();
        Assert.assertNotNull("Data on demand for 'Participant' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Participant' failed to provide an identifier", id);
        obj = Participant.findParticipant(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Participant' with identifier '" + id + "'", Participant.findParticipant(id));
    }
    
}
