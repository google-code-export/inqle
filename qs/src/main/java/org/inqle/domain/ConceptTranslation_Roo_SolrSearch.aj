// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inqle.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.inqle.domain.ConceptTranslation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;

privileged aspect ConceptTranslation_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer ConceptTranslation.solrServer;
    
    public static QueryResponse ConceptTranslation.search(String queryString) {
        String searchString = "ConceptTranslation_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse ConceptTranslation.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void ConceptTranslation.indexConceptTranslation(ConceptTranslation conceptTranslation) {
        List<ConceptTranslation> concepttranslations = new ArrayList<ConceptTranslation>();
        concepttranslations.add(conceptTranslation);
        indexConceptTranslations(concepttranslations);
    }
    
    @Async
    public static void ConceptTranslation.indexConceptTranslations(Collection<ConceptTranslation> concepttranslations) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (ConceptTranslation conceptTranslation : concepttranslations) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "concepttranslation_" + conceptTranslation.getId());
            sid.addField("conceptTranslation.created_dt", conceptTranslation.getCreated());
            sid.addField("conceptTranslation.updated_dt", conceptTranslation.getUpdated());
            sid.addField("conceptTranslation.lang_s", conceptTranslation.getLang());
            sid.addField("conceptTranslation.concept_t", conceptTranslation.getConcept());
            sid.addField("conceptTranslation.conceptname_s", conceptTranslation.getConceptName());
            sid.addField("conceptTranslation.conceptdescription_s", conceptTranslation.getConceptDescription());
            sid.addField("conceptTranslation.createdby_t", conceptTranslation.getCreatedBy());
            sid.addField("conceptTranslation.updatedby_t", conceptTranslation.getUpdatedBy());
            sid.addField("conceptTranslation.id_l", conceptTranslation.getId());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("concepttranslation_solrsummary_t", new StringBuilder().append(conceptTranslation.getCreated()).append(" ").append(conceptTranslation.getUpdated()).append(" ").append(conceptTranslation.getLang()).append(" ").append(conceptTranslation.getConcept()).append(" ").append(conceptTranslation.getConceptName()).append(" ").append(conceptTranslation.getConceptDescription()).append(" ").append(conceptTranslation.getCreatedBy()).append(" ").append(conceptTranslation.getUpdatedBy()).append(" ").append(conceptTranslation.getId()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void ConceptTranslation.deleteIndex(ConceptTranslation conceptTranslation) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("concepttranslation_" + conceptTranslation.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void ConceptTranslation.postPersistOrUpdate() {
        indexConceptTranslation(this);
    }
    
    @PreRemove
    private void ConceptTranslation.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer ConceptTranslation.solrServer() {
        SolrServer _solrServer = new ConceptTranslation().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
